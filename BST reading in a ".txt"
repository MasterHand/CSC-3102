#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <map>
#include <sstream>
#include <ctime> 

using namespace std;

/* An AVL tree node*/
struct node
{
    int key;
    struct node *parent;
    struct node *left;
    struct node *right;
    int height;
    int size;
    int rank;
};



/* A utility function to get height of the tree*/
int height(struct node *N)
{
    if (N == NULL)
        return 0;
    return N->height;
}



// Gets the size
int getSize(struct node *x){
    if (x == NULL) return 0;
    else {
        return x->size;
    }
}



// Caculates the size
void calcSize(struct node *x){
    x->size = 1 + getSize(x->left);
}



/* A utility function to get maximum of two integers*/
int max(int a, int b)
{
    return (a > b)? a : b;
}



/* Helper function that allocates a new node with the given key and
 * NULL left and right pointers. */
struct node* newNode(int key)
{
    struct node* node = (struct node*)
    malloc(sizeof(struct node));
    node->key = key;
    node->left = NULL;
    node->right = NULL;
    node->parent = NULL;
    node->height = 1; /* new node is initially added at leaf*/
    return(node);
}



/* function to find the minimum data within tree */

struct node * minValue(struct node* node)
{
    struct node* current = node;
    
    /* loop down to find the leftmost leaf */
    while (current->left != NULL)
        current = current->left;
    
    return current;
}



/* function to find the maximum data in tree */

struct node * maxValue(struct node* node)
{
    struct node* current = node;
    
    /* loop down to find the leftmost leaf */
    while (current->right != NULL)
        current = current->right;
    
    return current;
}



struct node * SC(struct node *x){
    if (x->right){
        if (minValue(x->right) != NULL)
            return minValue(x->right);
        else
            return 0;
    }
    struct node *p;
    p=x->parent;
    while (p != NULL && x == p->right){
        x=p;
        p=p->parent;
    }
    return p;
}


/*struct node *successor(struct node *x){
    if(x->right != NULL){
        struct node *y = x->right;
        while(y->left != NULL){
            y = y->left;
        }
        return y;
    }
    else{
        struct node *z = x->parent;
        while(z != NULL && x==z->right){
            x = z;
            z = x->parent;
        }
        return z;
    }
}
*/


/*
struct node *predecessor(struct node *x){
    if(x->left != NULL){
        struct node *y = x->left;
        while(y->right != NULL){
            y = y->right;
        }
        return y;
    }
    else{     
        struct node *z = x->parent;
        if(z != NULL && x == z->right){
            x = z;
        }
        return x;
    }
}
*/



 struct node *PR(struct node *x){
 if(x->left)
 return maxValue(x->left);
 
 struct node *p;
 p=x->parent;
 while(p && x == p->left){
 x=p;
 p=p->parent;
 }
 return p;
 }





/* search function */

int search(int key,struct node *root){
    //struct node *temp = root;
    if ( root == NULL )
        return 0;
    if ( root->key == key )
        return 1;
    else if ( root->key > key )
        return search( key,root->left);
    else
        return search(key,root->right);
}
/* Given a non-empty binary search tree, return the node with minimum
 * key value found in that tree. Note that the entire tree does not
 * need to be searched. */


struct node *searchForNodePointer(int key,struct node *root){
    if ( root == NULL )
        return 0;
    if ( root->key == key )
        return root;
    else if ( root->key > key )
        return searchForNodePointer( key,root->left);
    else
        return searchForNodePointer(key,root->right);
}


/* A utility function to right rotate subtree rooted with y*/

struct node *rightRotate(struct node *y)
{
    struct node *x = y->left;
    struct node *T2 = x->right;
    
    /* Perform rotation*/
    x->right = y;
    y->left = T2;
    
    /* Update heights*/
    y->height = max(height(y->left), height(y->right))+1;
    x->height = max(height(x->left), height(x->right))+1;
    
    /* Return new root*/
    return x;
}



/* A utility function to left rotate subtree rooted with x */

struct node *leftRotate(struct node *x)
{
    struct node *y = x->right;
    struct node *T2 = y->left;
    
    /* Perform rotation*/
    y->left = x;
    x->right = T2;
    
    /* Update heights*/
    x->height = max(height(x->left), height(x->right))+1;
    y->height = max(height(y->left), height(y->right))+1;
    
    /* Return new root*/
    return y;
}



/* Get Balance factor of node N*/

int getBalance(struct node *N)
{
    if (N == NULL)
        return 0;
    return height(N->left) - height(N->right);
}



struct node* insert(struct node* node, int key)
{
    /* 1. Perform the normal BST rotation */
    if (node == NULL)
        return(newNode(key));
    
    if (key < node->key)
        node->left = insert(node->left, key);
    else
        node->right = insert(node->right, key);
    
    /* 2. Update height of this ancestor node */
    node->height = max(height(node->left), height(node->right)) + 1;
    
    /* 3. Get the balance factor of this ancestor node to check whether
     * this node became unbalanced */
    int balance = getBalance(node);
    
    /* If this node becomes unbalanced, then there are 4 cases*/
    
    /* Left Left Case*/
    if (balance > 1 && key < node->left->key)
        return rightRotate(node);
    
    /* Right Right Case*/
    if (balance < -1 && key > node->right->key)
        return leftRotate(node);
    
    /* Left Right Case*/
    if (balance > 1 && key > node->left->key)
    {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }
    
    /* Right Left Case*/
    if (balance < -1 && key < node->right->key)
    {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }
    
    /* return the (unchanged) node pointer */
    return node;
    
    
    
}



// A utility function to print inorder traversal of the tree.
//The function also prints height of every node

void TR(struct node *root, ofstream &myfile)
{
    if(root != NULL)
    {
        
        TR(root->left, myfile);
        //printf("%d ", root->key);
        myfile << root->key << endl;
        TR(root->right, myfile);
    }
}



// Given a search key k, rank finds the number of elements in the subtree
// rooted at x, which are smaller than or equal to k
/*
int Rank(struct node *x, int k){ 
    if (x == NULL) return 0;
    if (k < x->key){
        return(Rank(x->left,k));
    }
    //if (k == x->key && x->left){
    if (k == x->key){
        return (x->left->size+1);
    }
    //if (k == x->key && x->left == NULL){
    //    return 1;
    //}
    return(x->left->size+1+Rank(x->right,k));
}


// Outputs the ith smallest element in subtree rooted at x
int Select(struct node *x, int i){
    if (x == NULL) return 0; 
    if (x->left->size >= i){  
        return Select(x->left,i);
    }
    if (x->left->size +1 == i){
        return x->key;
    }
    return Select(x->right,i-1-(x->left->size));
}
*/


int main()
{
    std::clock_t start;
    double duration;
    start = std::clock();
    struct node* root = NULL;
    string command;
    string data;
    
    ofstream myfile;
    myfile.open("outfile.txt");
    
    ifstream infile;
    infile.open("AVLtree-input.txt");
    
    myfile<<"-------------------REPORT-------------------"<<endl;
    myfile<<endl;
    while (!infile.eof()){
        getline(infile,command);
        int i = command.find_first_of(' ');
        int j = command.find_first_of('\0');
        data = command.substr(i+1,j);
        command = command.substr(0,i);
        
        if (!(command.compare("IN"))){
            //cout<<"Insert is working"<<endl;
            string str = data;
            int dataStringToint;
            istringstream ( str ) >> dataStringToint;
            root = insert(root,dataStringToint);
            //myfile<<"Insert ----->"<<data<<endl;
        }
        
        else if(!(command.compare("MI"))){
            //cout<<"Min is working"<<endl;
            myfile << endl;
            myfile << "Minimum (up to this point): " << minValue(root)->key << endl;
            myfile << endl;
        }
        
        else if(!(command.compare("MA"))){
            //cout<<"Max is working"<<endl;
            myfile << endl;
            myfile << "Maximum (up to this point): " << maxValue(root)->key << endl;
            myfile << endl;
        }
    
        else if(!(command.compare("TR"))){
            //cout<<"Inorder-Traveral is working"<<endl;
            myfile<<"Inorder-Traveral:"<<endl<<endl;
            TR(root, myfile);
            myfile<<endl;
        }

        else if(!(command.compare("SR"))){
            //cout<<"Search is working"<<endl;
            string str = data;
            int dataStringToint;
            istringstream ( str ) >> dataStringToint;
            int answer = search(dataStringToint,root);
            myfile<<endl;
            myfile<<"Search for ->"<<data<<endl;
            myfile<<"Result: ";
            if (answer ==1)
                myfile<<"Found!";
            else
                myfile<<"Not Found!";
            myfile<<endl;
            myfile<<endl;
        }

        
        
        else if(!(command.compare("SC"))){
            //cout<<"Successor is working"<<endl;
            //string str = data;
            int dataStringToint;
            istringstream ( data ) >> dataStringToint;
            struct node *answer = searchForNodePointer(dataStringToint,root);
            //struct node *nextAnswer = succ(answer);
            myfile << endl;
            myfile << "Successor of "<<data<<": " << SC(answer) << endl;
            myfile << endl;
        }
        
        
        else if(!(command.compare("PR"))){
            //cout<<"Predecessor is working"<<endl;
            string str = data;
            int dataStringToint;
            istringstream ( str ) >> dataStringToint;
            struct node *answer = searchForNodePointer(dataStringToint,root);
            //struct node *nextAnswer = PR(answer);
            myfile << endl;
            myfile << "Predecessor of "<<data<<": " << PR(answer) << endl;
            myfile << endl;
        }
         
        /* 
        else if(!(command.compare("SE"))){
            //cout<<"Select is working"<<endl;
            string str = data;
            int dataStringToint;
            istringstream ( str ) >> dataStringToint;
            myfile << Select(dataStringToint, root);
        }

        else if(!(command.compare("RA"))){
            //cout<<"Rank is working"<<endl;
            string str = data;
            int dataStringToint;
            istringstream ( str ) >> dataStringToint;
            myfile << Rank(root, dataStringToint);

        }
        */
        
    }                              
    infile.close();
    
    duration = ( std::clock() - start ) / (double) CLOCKS_PER_SEC;

    myfile<<"Total Time Elapsed: "<<duration<<" seconds"<<endl<<endl;
    myfile<<"-----------------END REPORT-----------------"<<endl;
    
    return 0;
    
}
